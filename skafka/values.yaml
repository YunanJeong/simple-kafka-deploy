# Default values for skafka.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


global:
  monitorDomain: test.wai
  imageRegistry: docker.io              # bitnami 계열 글로벌

kafka:
  image:
    registry: docker.io

  # server.properties에 항목 추가  
  extraConfig: ""      
             # "offsets.topic.replication.factor=3"   # 브로커 default(브로커 수 3개 이상)
             # (replication.factor <= 브로커 수) 로 되어야함
             # "offsets.topic.replication.factor=1"   # 브로커 1~2개 사용시
  
  listeners:
    # https://github.com/bitnami/charts/issues/19128
    client:
      protocol: PLAINTEXT  # SASL_PLAINTEXT
    controller:
      protocol: PLAINTEXT  # SASL_PLAINTEXT
    interbroker:
      protocol: PLAINTEXT  # SASL_PLAINTEXT
    external:
      protocol: PLAINTEXT  # SASL_PLAINTEXT
    extraListeners: []
    advertisedListeners: ""

  # sals:
  # tls: 
  extraEnvVars: []        # 환경변수 "추가"
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  
  # controller: KRAFT모드 Broker
  controller:                      
    replicaCount: 3                # production ready에선 (호스트 수:브로커 수)=(1:1)로 설정 (스케일 인아웃시 pvc관리 용이)
    controllerOnly: false          # true: broker 기능을 포함하지 않는 controller 실행 
    zookeeperMigrationMode: false  # true: 주키퍼,크래프트 동시실행가능(마이그레이션목적)
    extraEnvVars: []               # Kafka Pod에 환경변수 "추가"
    affinity: {}
    nodeSelector: {}
    persistence:
      enabled: false               # production 배포시, true 필수
      size: 8Gi                    # 디스크 가용량의 70~80% 권장
      mountPath: /bitnami/kafka
    logPersistence:
      enabled: false
      size: 8Gi
      mountPath: /opt/bitnami/kafka/logs
  
  # broker: Zookeeper모드 Broker
  broker:                          
    replicaCount: 0                # production ready에선 (호스트 수:브로커 수)=(1:1)로 설정 (스케일 인아웃시 pvc관리 용이)
    zookeeperMigrationMode: false  # true: 주키퍼,크래프트 동시실행가능(마이그레이션목적)
    extraEnvVars: []               # Kafka Pod에 환경변수 "추가"
    affinity: {}
    nodeSelector: {}
    persistence:
      enabled: false               # production 배포시, true 필수
      size: 8Gi                    # 디스크 가용량의 70~80% 권장
      mountPath: /bitnami/kafka
    logPersistence:
      enabled: false
      size: 8Gi
      mountPath: /opt/bitnami/kafka/logs
  
  service:
    type: LoadBalancer
    ports:
      client: 9092                 # "tcp-client"   (allows access from localhost machine)
      external: 9095               # "tcp-external" (requires externalAccess.enabled=true)
    nodePorts:
      client: ''
      external: ''
    loadbalancerIP: ''             # Managed Service 등 실제 LB가 있으면 입력. K3s의 가상 LB는 자동적용
    
  externalAccess:
    enabled: true                  # 위 "tcp-external"을 쓰려면 true 필요
    autoDiscovery:
      enabled: true                # false시, 아래 네트워크 섹션 직접 설정 필요(nodeports, loadBalancerIps, externalIps 등)
      image:
        registry: docker.io        # 오프라인 환경에서 docker.io프록시 or 사설registry로 설정                                
    
    # KRAFT모드 Broker의 externalAccess 설정
    controller:
      service:
        type: NodePort             # 실제 LB없으면, NodePort로 설정!!!
                                   # externalAccess에서 LoadBalancer로 설정하지않아도, kafka.service.type=LoadBalancer이면 Kafka는 LB 형식으로 배포된다.
                                   # externalAccess섹션은 개별 kafka노드를 어떻게 노출될 것인가를 결정한다.
                                     # But, Kafka Client가 개별 노드에 직접접근하기보다는 클러스터 내부설정 용도에 가깝다.
                                   # externalAccess섹션은 [kafka의 AdvertisedListener] 설정에 관여한다.
                                    
                                   # <kafka client가 "tcp-external"로 접근시 동작>
                                     # 첫번째 통신은 "tcp-external"포트를 사용
                                     # 이후 client는 AdvertisedListener를 받아, [EXTERNAL://IP:Port]로 통신
                                    
                                   # <네트워크 연결 확인시 주의 사항>
                                     # 1회성 통신인 [curl], [kcat토픽조회] 등은 AdvertisedListener를 사용하지않아서 externalAccess 설정이 잘못되어도 정상 통신된다.
                                     # 2회 이상 통신하는 [kafka-topics.sh토픽조회], [produce], [consume] 등으로 테스트가 필요

        ports:
          external: 9094           # "tcp-kafka"  (internally used)
                                    
        nodePorts: []              # broker 수 만큼 지정 (중복불가) # autoDiscovery 미사용시 필수 # e.g. [30003, 30004, 30005]  
        externalIPs: []            # broker 수 만큼 지정 # autoDiscovery 미사용시 설정 권장 # broker 별 실제 통신가능한 IP 직접 입력 (중복가능)
  
                                   # externalAccess Nodeport모드 && autoDiscovery 미사용 && externalIPs 미등록시
                                     # advertisedListener로 "EXTERNAL://{공인IP}:{개별nodeport}"가 자동등록된다.
                                     # EC2에선 괜찮지만, 일반적으로 공인IP를 통한 포트포워딩이 없으므로 사용불가
    
    # Zookeeper모드 Broker의 externalAccess 설정 (섹션 동일)
    broker:                          
      service:
        type: LoadBalancer

  networkPolicy:
    enabled: false
  volumePermissions:
    enabled: false
  serviceAccount:
    create: true
  rbac: 
    create: true

  metrics:
    kafka:          
      enabled: false
      image:
        registry: docker.io  # bitnami/kafka-exporter
      containerPorts:
        metrics: 9308
    jmx:            
      enabled: false
      kafkaJmxPort: 5555
      image:
        registry: docker.io  # bitnami/jmx-exporter
      containerPorts:
        metrics: 5556
      service:
        ports:
          metrics: 5556
    serviceMonitor:          # bitnami/prometheus-operator 관련 설정
      enabled: false
    prometheusRule:
      emabled: false

  provisioning:
    enabled: false
    numPartitions: 1
    replicationFactor: 1

  kraft:
    enabled: true
    clusterId: ""
  zookeeper:
    enabled: false
    replicaCount: 3
    persistence:
      enabled: false  # production시 true 필수
      size: 8Gi       # 충분 


connect:
  enabled: true
  kafka:
    create: false
  schema-registry:
    create: false
  replicaCount: 1
  image:
    repository: confluentinc/cp-kafka-connect
    pullPolicy: IfNotPresent
    tag: ""  # 7.2.2
  configMapPairs:
    CONNECT_BOOTSTRAP_SERVERS: "{{ .Release.Name }}-kafka:9092"
    CONNECT_REST_PORT: "8083"
  extraVolumeMounts: []
    # - name: plugin
    #   mountPath: /usr/share/confluent-hub-components
  extraVolumes: []
    # - name: plugin
    #   emptyDir: {}
  initContainers: []
    # - name: init-plugin
    #   image: confluentinc/cp-kafka-connect:7.2.2
    #   command:
    #     - sh
    #     - -c
    #     - |
    #       confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.7.4
    #       confluent-hub install --no-prompt confluentinc/kafka-connect-s3:10.5.4
    #       wget -P /usr/share/confluent-hub-components/confluentinc-kafka-connect-s3/ https://github.com/YunanJeong/kafka-connect-s3-without-topicname/releases/download/v10.5.0%2Bv1.0.0/topicless-timebasedpartitioner.jar
    #   volumeMounts:
    #     - name: plugin
    #       mountPath: /usr/share/confluent-hub-components

k8dashboard:
  enabled: true
  image:  # 글로벌 적용 불가
    registry: docker.io
  protocolHttp: true 
  service:
    externalPort: 8443
  serviceAccount:
    name: k8dash-admin
  extraArgs:
    - --token-ttl=86400
    - --enable-skip-login 
    - --enable-insecure-login
  tolerations:
  - key: type
    operator: "Equal"
    value: "ctrl"
    effect: "NoSchedule"

ui4kafka:
  enabled: true
  image:  # 글로벌 적용 불가
    registry: docker.io
  yamlApplicationConfig: false  # warning 메시지 발생하지만 괜찮음. # 아래서 Helm 내장객체인 {{ .Release.Name }} 사용하려면 false 설정필요
  myYamlApplicationConfig:
    kafka:
      clusters:
        - name: "{{ .Release.Name }}-kafka"
          bootstrapServers: "{{ .Release.Name }}-kafka:9092"
          # zookeeper: ReleaseName-zookeeper-headless:2181
          kafkaConnect:
            - name: connect
              address: http://{{ .Release.Name }}-connect:8083
          # metrics:
          #   port: 5556
          #   type: JMX
    auth:
      type: disabled
    management:
      health:
        ldap:
          enabled: false
  yamlApplicationConfigConfigMap:
    keyName: myconfig.yml
    name: skafka-ui-config  # configMapName
      
  tolerations:
    - key: type
      operator: "Equal"
      value: "ctrl"
      effect: "NoSchedule"

ingress:
  enabled: true
  annotations:
    spec.ingressClassName: traefik
    
    # kubernetes.io/ingress.class is deprecated
    
    # # minikube 설치용
    # kubernetes.io/ingress.class: nginx

    # # k3s 설치용
    # kubernetes.io/ingress.class: traefik

    # # k3d 설치용
    # ingress.kubernetes.io/ssl-redirect: "false"

    # # AWS EKS 설치용
    # kubernetes.io/ingress.class: alb
    # alb.ingress.kubernetes.io/group.name: public
    # alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/target-type: ip
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 9090}]'
