global:
  imageRegistry: ''
  imagePullSecrets: []
  storageClass: ''

kubeVersion: ''
nameOverride: ''
fullnameOverride: ''
clusterDomain: cluster.local
commonLabels: {}
commonAnnotations: {}
extraDeploy: []
serviceBindings:
  enabled: false

diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

image:
  registry: docker.io
  repository: bitnami/kafka
  tag: 3.5.1-debian-11-r44
  digest: ''
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false

extraInit: ''
config: ''
existingConfigmap: ''
extraConfig: ''
secretConfig: ''
existingSecretConfig: ''
log4j: ''
existingLog4jConfigMap: ''
heapOpts: '-Xmx1024m -Xms1024m'
interBrokerProtocolVersion: ''

listeners:
  client:
    containerPort: 9092
    protocol: SASL_PLAINTEXT
    name: CLIENT
    sslClientAuth: ''
  controller:
    name: CONTROLLER
    containerPort: 9093
    protocol: SASL_PLAINTEXT
    sslClientAuth: ''
  interbroker:
    containerPort: 9094
    protocol: SASL_PLAINTEXT
    name: INTERNAL
    sslClientAuth: ''
  external:
    containerPort: 9095
    protocol: SASL_PLAINTEXT
    name: EXTERNAL
    sslClientAuth: ''
  extraListeners: []
  overrideListeners: ''
  advertisedListeners: ''
  securityProtocolMap: ''

sasl:
  enabledMechanisms: 'PLAIN,SCRAM-SHA-256,SCRAM-SHA-512'
  interBrokerMechanism: PLAIN
  controllerMechanism: PLAIN
  interbroker:
    user: inter_broker_user
    password: ''
  controller:
    user: controller_user
    password: ''
  client:
    users:
      - user1
    passwords: ''
  zookeeper:
    user: ''
    password: ''
  existingSecret: ''

tls:
  type: JKS
  pemChainIncluded: false
  existingSecret: ''
  autoGenerated: false
  passwordsSecret: ''
  passwordsSecretKeystoreKey: keystore-password
  passwordsSecretTruststoreKey: truststore-password
  passwordsSecretPemPasswordKey: ''
  keystorePassword: ''
  truststorePassword: ''
  keyPassword: ''
  jksTruststoreSecret: ''
  jksTruststoreKey: ''
  endpointIdentificationAlgorithm: https
  sslClientAuth: required
  zookeeper:
    enabled: false
    verifyHostname: true
    existingSecret: ''
    existingSecretKeystoreKey: zookeeper.keystore.jks
    existingSecretTruststoreKey: zookeeper.truststore.jks
    passwordsSecret: ''
    passwordsSecretKeystoreKey: keystore-password
    passwordsSecretTruststoreKey: truststore-password
    keystorePassword: ''
    truststorePassword: ''

extraEnvVars: []
extraEnvVarsCM: ''
extraEnvVarsSecret: ''
extraVolumes: []
extraVolumeMounts: []
sidecars: []
initContainers: []
controller:
  replicaCount: 3
  controllerOnly: false
  minId: 0
  zookeeperMigrationMode: false
  config: ''
  existingConfigmap: ''
  extraConfig: ''
  secretConfig: ''
  existingSecretConfig: ''
  heapOpts: '-Xmx1024m -Xms1024m'
  command: []
  args: []
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraContainerPorts: []
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    failureThreshold: 6
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  lifecycleHooks: {}
  resources:
    limits: {}
    requests: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    seccompProfile:
      type: RuntimeDefault
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
  hostAliases: []
  hostNetwork: false
  hostIPC: false
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ''
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ''
    key: ''
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  terminationGracePeriodSeconds: ''
  podManagementPolicy: Parallel
  priorityClassName: ''
  runtimeClassName: ''
  enableServiceLinks: true
  schedulerName: ''
  updateStrategy:
    type: RollingUpdate
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  pdb:
    create: false
    minAvailable: ''
    maxUnavailable: 1
  persistence:
    enabled: true
    existingClaim: ''
    storageClass: ''
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    labels: {}
    selector: {}
    mountPath: /bitnami/kafka
  logPersistence:
    enabled: false
    existingClaim: ''
    storageClass: ''
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    selector: {}
    mountPath: /opt/bitnami/kafka/logs

broker:
  replicaCount: 0
  minId: 100
  zookeeperMigrationMode: false
  config: ''
  existingConfigmap: ''
  extraConfig: ''
  secretConfig: ''
  existingSecretConfig: ''
  heapOpts: '-Xmx1024m -Xms1024m'
  command: []
  args: []
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraContainerPorts: []
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    failureThreshold: 6
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  lifecycleHooks: {}
  resources:
    limits: {}
    requests: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    seccompProfile:
      type: RuntimeDefault
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
  hostAliases: []
  hostNetwork: false
  hostIPC: false
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ''
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ''
    key: ''
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  terminationGracePeriodSeconds: ''
  podManagementPolicy: Parallel
  priorityClassName: ''
  runtimeClassName: ''
  enableServiceLinks: true
  schedulerName: ''
  updateStrategy:
    type: RollingUpdate
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  pdb:
    create: false
    minAvailable: ''
    maxUnavailable: 1
  persistence:
    enabled: true
    existingClaim: ''
    storageClass: ''
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    labels: {}
    selector: {}
    mountPath: /bitnami/kafka
  logPersistence:
    enabled: false
    existingClaim: ''
    storageClass: ''
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    selector: {}
    mountPath: /opt/bitnami/kafka/logs

service:
  type: ClusterIP
  ports:
    client: 9092
    controller: 9093
    interbroker: 9094
    external: 9095
  extraPorts: []
  nodePorts:
    client: ''
    external: ''
  sessionAffinity: None
  sessionAffinityConfig: {}
  clusterIP: ''
  loadBalancerIP: ''
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}
  headless:
    controller:
      annotations: {}
      labels: {}
    broker:
      annotations: {}
      labels: {}
      
externalAccess:
  enabled: false
  autoDiscovery:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.25.13-debian-11-r11
      digest: ''
      pullPolicy: IfNotPresent
      pullSecrets: []
    resources:
      limits: {}
      requests: {}
  controller:
    forceExpose: false
    service:
      type: LoadBalancer
      ports:
        external: 9094
      loadBalancerIPs: []
      loadBalancerNames: []
      loadBalancerAnnotations: []
      loadBalancerSourceRanges: []
      nodePorts: []
      externalIPs: []
      useHostIPs: false
      usePodIPs: false
      domain: ''
      publishNotReadyAddresses: false
      labels: {}
      annotations: {}
      extraPorts: []
  broker:
    service:
      type: LoadBalancer
      ports:
        external: 9094
      loadBalancerIPs: []
      loadBalancerNames: []
      loadBalancerAnnotations: []
      loadBalancerSourceRanges: []
      nodePorts: []
      externalIPs: []
      useHostIPs: false
      usePodIPs: false
      domain: ''
      publishNotReadyAddresses: false
      labels: {}
      annotations: {}
      extraPorts: []
networkPolicy:
  enabled: false
  allowExternal: true
  explicitNamespacesSelector: {}
  externalAccess:
    from: []
  egressRules:
    customRules: []
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r60
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    runAsUser: 0
serviceAccount:
  create: true
  name: ''
  automountServiceAccountToken: true
  annotations: {}
rbac:
  create: false
metrics:
  kafka:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/kafka-exporter
      tag: 1.7.0-debian-11-r102
      digest: ''
      pullPolicy: IfNotPresent
      pullSecrets: []
    certificatesSecret: ''
    tlsCert: cert-file
    tlsKey: key-file
    tlsCaSecret: ''
    tlsCaCert: ca-file
    extraFlags: {}
    command: []
    args: []
    containerPorts:
      metrics: 9308
    resources:
      limits: {}
      requests: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
    hostAliases: []
    podLabels: {}
    podAnnotations: {}
    podAffinityPreset: ''
    podAntiAffinityPreset: soft
    nodeAffinityPreset:
      type: ''
      key: ''
      values: []
    affinity: {}
    nodeSelector: {}
    tolerations: []
    schedulerName: ''
    enableServiceLinks: true
    priorityClassName: ''
    topologySpreadConstraints: []
    extraVolumes: []
    extraVolumeMounts: []
    sidecars: []
    initContainers: []
    service:
      ports:
        metrics: 9308
      clusterIP: ''
      sessionAffinity: None
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '{{ .Values.metrics.kafka.service.ports.metrics }}'
        prometheus.io/path: /metrics
    serviceAccount:
      create: true
      name: ''
      automountServiceAccountToken: true
  jmx:
    enabled: false
    kafkaJmxPort: 5555
    image:
      registry: docker.io
      repository: bitnami/jmx-exporter
      tag: 0.19.0-debian-11-r66
      digest: ''
      pullPolicy: IfNotPresent
      pullSecrets: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
    containerPorts:
      metrics: 5556
    resources:
      limits: {}
      requests: {}
    service:
      ports:
        metrics: 5556
      clusterIP: ''
      sessionAffinity: None
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '{{ .Values.metrics.jmx.service.ports.metrics }}'
        prometheus.io/path: /
    whitelistObjectNames:
      - 'kafka.controller:*'
      - 'kafka.server:*'
      - 'java.lang:*'
      - 'kafka.network:*'
      - 'kafka.log:*'
    config: >-
      jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:{{
      .Values.metrics.jmx.kafkaJmxPort }}/jmxrmi

      lowercaseOutputName: true

      lowercaseOutputLabelNames: true

      ssl: false

      {{- if .Values.metrics.jmx.whitelistObjectNames }}

      whitelistObjectNames: ["{{ join "\",\""
      .Values.metrics.jmx.whitelistObjectNames }}"]

      {{- end }}
    existingConfigmap: ''
    extraRules: ''
  serviceMonitor:
    enabled: false
    namespace: ''
    interval: ''
    scrapeTimeout: ''
    labels: {}
    selector: {}
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    jobLabel: ''
  prometheusRule:
    enabled: false
    namespace: ''
    labels: {}
    groups: []
provisioning:
  enabled: false
  numPartitions: 1
  replicationFactor: 1
  topics: []
  nodeSelector: {}
  tolerations: []
  extraProvisioningCommands: []
  parallel: 1
  preScript: ''
  postScript: ''
  auth:
    tls:
      type: jks
      certificatesSecret: ''
      cert: tls.crt
      key: tls.key
      caCert: ca.crt
      keystore: keystore.jks
      truststore: truststore.jks
      passwordsSecret: ''
      keyPasswordSecretKey: key-password
      keystorePasswordSecretKey: keystore-password
      truststorePasswordSecretKey: truststore-password
      keyPassword: ''
      keystorePassword: ''
      truststorePassword: ''
  command: []
  args: []
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  podAnnotations: {}
  podLabels: {}
  serviceAccount:
    create: false
    name: ''
    automountServiceAccountToken: true
  resources:
    limits: {}
    requests: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    seccompProfile:
      type: RuntimeDefault
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
  schedulerName: ''
  enableServiceLinks: true
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  waitForKafka: true
kraft:
  enabled: true
  clusterId: ''
  controllerQuorumVoters: ''
zookeeperChrootPath: ''
zookeeper:
  enabled: false
  replicaCount: 1
  auth:
    client:
      enabled: false
      clientUser: ''
      clientPassword: ''
      serverUsers: ''
      serverPasswords: ''
  persistence:
    enabled: true
    storageClass: ''
    accessModes:
      - ReadWriteOnce
    size: 8Gi
externalZookeeper:
  servers: []
