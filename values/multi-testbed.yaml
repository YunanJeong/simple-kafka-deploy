# helm install시 사용되는 config value는 노출되지 않도록 gitignore권장
# 이 파일은 로컬테스트용이라 샘플삼아 그냥 업로드한다.

global:
  monitorDomain: test.wai
  imageRegistry: docker.io            # bitnami 계열 글로벌 

kafka:
  # nodeSelector:                     # Pod 배치전략
  #   alpaka/node-type: worker        # kubectl로 관리가능. label에 'alpaka/node-type=worker'라는 항목이 추가되어있는 node에 Pod이 실행된다.
  persistence:
    size: 8Gi                         # pvc data-{release}-kafka-0, 가용량의 70~80%, 500Gi기준 약 330Gi
  replicaCount: 3
  defaultReplicationFactor: 1
  numPartitions: 1                    # 토픽생성시 디폴트 파티션 수
  deleteTopicEnable: true
  
  service:
    type: LoadBalancer
    ports:
      external: 9095                  # "tcp-external"
    headless:
      publishNotReadyAddresses: true  # 23.0.5 버전 멀티클러스터가 안켜지는 버그 대응

  externalAccess:
    enabled: false
    autoDiscovery:
      enabled: true
      image:
        registry: docker.io           # 비인터넷환경 => 프록시registry를 쓰거나, autoDiscovery대신 loadBalancerIP 명시
    service:
      ports:
        external: 9094                # 네트워크상 실제 사용가능한 Port("tcp-kafka")
      loadBalancerIPs: []
        # - "X.X.X.X"                 # 노출되지 않도록 gitignore권장
        # - "Y.Y.Y.Y"
      loadBalancerNames: []
        # - testbed-kafka-0.testbed-kafka-headless.default.svc.cluster.local  # 172.X.X.X
        # - testbed-kafka-1.testbed-kafka-headless.default.svc.cluster.local  # DNS서버 or /etc/hosts 에 추가 필요

  # advertisedListeners:  # []
  #   - "INTERNAL://:9094"
  #   - "CLIENT://X.X.X.X:9092"
  #   - "EXTERNAL://X.X.X.X:9095"

  rbac: 
    create: true

  kraft:
    enabled: true
  zookeeper:
    enabled: false
    replicaCount: 1
    metrics:
      enabled: false
      serviceMonitor:
        enabled: false
  
  metrics: 
    kafka:
      enabled: false
      # nodeSelector:
    jmx:
      enabled: false

connect:
  enabled: true
  replicaCount: 1
  image:
    repository: confluentinc/cp-kafka-connect  # registry 포함 표기 가능. 없으면 container runtime의 default
    pullPolicy: IfNotPresent
    tag: 7.2.2                                     
  configMapPairs:
    CONNECT_BOOTSTRAP_SERVERS: "{{ .Release.Name }}-kafka:9092"
    CONNECT_REST_PORT: "8083"
  extraVolumeMounts: # []
    - name: plugin
      mountPath: /usr/share/confluent-hub-components
  extraVolumes: # []
    - name: plugin
      emptyDir: {}
  initContainers: # []
    - name: init-plugin
      image: confluentinc/cp-kafka-connect:7.2.2  # curl, wget, tar, confluent-hub 가능
      command:
        - sh
        - -c
        - |
          confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.7.4
          confluent-hub install --no-prompt confluentinc/kafka-connect-s3:10.5.4
          wget -P /usr/share/confluent-hub-components/confluentinc-kafka-connect-s3/ https://github.com/YunanJeong/kafka-connect-s3-without-topicname/releases/download/v10.5.0%2Bv1.0.0/topicless-timebasedpartitioner.jar
      volumeMounts:
        - name: plugin
          mountPath: /usr/share/confluent-hub-components

k8dashboard:
  enabled: true
  image:  # 글로벌 적용 불가
    registry: docker.io
  protocolHttp: true 
  service:
    externalPort: 8443
  serviceAccount:
    name: k8dash-admin
  extraArgs:
    - --token-ttl=86400
    - --enable-skip-login 
    - --enable-insecure-login
  tolerations:
  - key: type
    operator: "Equal"
    value: "ctrl"
    effect: "NoSchedule"


ui4kafka:
  enabled: true
  image:  # 글로벌 적용 불가
    registry: docker.io
  yamlApplicationConfig:
    kafka:
      clusters:
        - name: testbed-kafka
          bootstrapServers: "testbed-kafka-headless:9092"
          # zookeeper: ReleaseName-zookeeper-headless:2181
          kafkaConnect:
            - name: connect
              address: http://testbed-connect:8083
          # metrics:
          #   port: 5556
          #   type: JMX
    auth:
      type: disabled
    management:
      health:
        ldap:
          enabled: false
  tolerations:
    - key: type
      operator: "Equal"
      value: "ctrl"
      effect: "NoSchedule"

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: traefik  # k3s default ingress controller
